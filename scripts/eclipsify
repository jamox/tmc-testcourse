#!/usr/bin/env ruby
require 'fileutils'

include FileUtils
cd File.dirname(File.dirname(__FILE__))

if !ARGV[0] || ['-h', '--help'].include?(ARGV[0])
  puts"Upgrades project configs to support eclipse."
  puts
  puts "Usage: ./eclipsify "
  puts
  exit 0
end

source = ARGV[0]
dest = "#{source}_eclipse"
sample = File.join("scripts", "sample_project")


#template_name = 'template_project'
#template_path = "private/#{template_name}"


# Files to move:
cp_r source, dest

['.project', '.classpath', '.settings'].each do |file|
  cp_r File.join(sample, file), dest
end
# fix .classpath
#


def gsub_in_file!(filename, search, replacement)
  text = File.read(filename)
  text.gsub!(search, replacement)
  File.open(filename, 'wb') {|f| f.write(text) }
end





# ClassPath
class_path = Dir.glob(File.join(dest, 'lib', '**/*')).inject("") do |acc, elem|
  elem = elem.split("/")[1..-1].join("/")
  acc << "<classpathentry kind=\"lib\" path=\"#{elem}\" />\n"
end
gsub_in_file!(File.join(dest, '.classpath'), '<insert_class_path_here />', class_path)


  # Project
gsub_in_file!(File.join(dest, '.project'), 'NAME_HERE', ARGV[0].split('/')[-1])






=begin




puts "Copying from #{template_path} to #{dest_path}"
mkdir_p dest_category unless dest_category.empty?
cp_r template_path, dest_path

puts "Replacing occurrences of #{template_name} with #{dest_name}"
files_with_project_name = [
  'nbproject/project.properties',
  'nbproject/build-impl.xml',
  'nbproject/project.xml',
  'build.xml'
]
for file in files_with_project_name
  puts "  in #{dest_path}/#{file}"
  gsub_in_file!("#{dest_path}/#{file}", template_name, dest_name)
end
=end
puts
puts "Done!"
puts
