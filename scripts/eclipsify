#!/usr/bin/env ruby
require 'fileutils'

include FileUtils
cd File.dirname(File.dirname(__FILE__))

if !ARGV[0] || ['-h', '--help'].include?(ARGV[0])
  puts"Creates a new project from the project template."
  puts
  puts "Usage: #{__FILE__} [category/]project-name"
  puts
  exit 0
end

source = ARGV[0]
dest = "#{source}_eclipse"
sample = File.join("scripts", "sample_project")

cp_r source, dest

cp_r File.join(sample, ".project"), dest
cp_r File.join(sample, ".classpath"), dest
cp_r File.join(sample, ".settings"), dest

# fix .classpath
#
classpath = IO.read(File.join(sample, ".classpath"))
jars = Dir.glob(File.join(dest, 'lib', '**/*'))
class_path = jars.inject("") do |acc, elem|
  elem = elem.split("/")[1..-1].join("/")
  acc << "<classpathentry kind=\"lib\" path=\"#{elem}\" />\n"
end

classpath.gsub!("<insert_class_path_here />", class_path)
File.write(File.join(dest, '.classpath'), classpath)


project_file = File.read(File.join(dest, '.project'))
contents = project_file.gsub("NAME_HERE", ARGV[0].split("/")[-1])
File.write(File.join(dest, '.project'), contents)






=begin
def gsub_in_file!(filename, search, replacement)
  text = File.read(filename)
  text.gsub!(search, replacement)
  File.open(filename, 'wb') {|f| f.write(text) }
end


dest_path = ARGV[0]

dest_category = dest_path.split('/').reverse.drop(1).reverse.join('/')
dest_name = dest_path.split('/').last

template_name = 'template_project'
template_path = "private/#{template_name}"

puts "Copying from #{template_path} to #{dest_path}"
mkdir_p dest_category unless dest_category.empty?
cp_r template_path, dest_path

puts "Replacing occurrences of #{template_name} with #{dest_name}"
files_with_project_name = [
  'nbproject/project.properties',
  'nbproject/build-impl.xml',
  'nbproject/project.xml',
  'build.xml'
]
for file in files_with_project_name
  puts "  in #{dest_path}/#{file}"
  gsub_in_file!("#{dest_path}/#{file}", template_name, dest_name)
end
=end
puts
puts "Done!"
puts
